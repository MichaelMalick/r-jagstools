% Generated by roxygen2: do not edit by hand
% Please edit documentation in R/jags_sample.R
\name{jags_sample}
\alias{jags_sample}
\alias{jags_parallel}
\alias{jags_serial}
\title{Run JAGS models with each MCMC chain computed in serial or parallel}
\usage{
jags_sample(data, inits, file, variable.names, n.chains = 1, n.adapt = 100,
  burnin = 100, n.iter = 1000, thin = 1, load.modules = NULL,
  method = "serial", progress.bar = "text", parallel = list(n.clusters =
  n.chains, RNGseed = 123, type = "PSOCK", verbose = FALSE))

jags_parallel(data, inits, file, variable.names, n.chains = 1,
  n.adapt = 100, burnin = 100, n.iter = 1000, thin = 1,
  load.modules = NULL, progress.bar = "text", parallel = list(n.clusters =
  n.chains, RNGseed = 123, type = "PSOCK", verbose = FALSE))

jags_serial(data, inits, file, variable.names, n.chains = 1, n.adapt = 100,
  burnin = 100, n.iter = 1000, thin = 1, load.modules = NULL,
  progress.bar = "text")
}
\arguments{
\item{data}{a list containing the data for the model; see
\code{?rjags::jags.model} for details.}

\item{inits}{a list or function giving the initial values for each variable; see
\code{?rjags::jags.model} for details.}

\item{file}{path to the file containing the JAGS model; see
\code{?rjags::jags.model} for details.}

\item{variable.names}{character vector of names of variables to monitor in JAGS; see
\code{?rjags::coda.samples} for details.}

\item{n.chains}{number of MCMC chains to run; see \code{?rjags::jags.model} for
details.}

\item{n.adapt}{number of iterations for adaption; see \code{?rjags::jags.model} for
details.}

\item{burnin}{number of iterations to use for burnin of the MCMC chains. The burnin
iterations are not saved.}

\item{n.iter}{number of samples for each Markov chain; see
\code{?rjags::coda.samples} for details.}

\item{thin}{thinning interval; see \code{?coda.samples} for details.}

\item{load.modules}{JAGS modules to load before running model; see
\code{?rjags::load.modules} for details.}

\item{method}{string identifying method for computation; either 'serial' or
'parallel'; defaults to 'serial'.}

\item{progress.bar}{type of progress bar to use; see \code{rjags::update.jags} for details}

\item{parallel}{a list of arguments for parallel computing:
\itemize{
  \item{\code{n.clusters }}{number of cluster to use for computation;
    currently needs to be set equal to \code{n.chains}.}
  \item{\code{RNGseed }}{seed for the RNG stream sent to the
        clusters; setting this to a positive integer allows
        the chains to be reproducible.}
  \item{\code{type }}{type of cluster to create; either "PSOCK" or
    "FORK", or "MC"; Both "PSOCK" and "FORK" are based on the
    \code{snow} package, whereas "MC" is based on the \code{multicore}
    package; type = "MC" is likely not available for Windows machines;
    see \code{?parallel::makeCluster} for more details}
  \item{\code{verbose }}{logical, should output from each cluster be
    sent to terminal. Can be useful for debugging.}
}}
}
\value{
An \code{mcmc.list}
}
\description{
\code{jags_sample} is a wrapper for functions in the \code{rjags}
     package that allows for running JAGS from R with each MCMC chain
     computed serially or in parallel using the foreach package.
}
\details{
If method = 'serial' the function runs JAGS using the
     \code{rjags::coda.samples} function. If method = 'parallel' the function
     uses the \code{parallel} and \code{foreach} packages to send each chain
     to different clusters. Unfortunately, when the parallel type = 'PSOCK'
     no progress bars are available. If parallel type = 'FORK' and verbose =
     TRUE, progress bars should be printed to the terminal among other
     potentially useful output.

     Because the funtion returns an mcmc.list object, the model (as defined by
     \code{rjags::jags.model}) is not retained and therefore, updating or
     extending the MCMC runs is currently unavailable. Adding this
     functionality would require saving the model object, which would make
     the return not an mcmc.list object and would likely require the creation
     of a new class and additional functions to deal with this new class.
}
\examples{

# ----------------------------
# Simulate data
# ----------------------------

library(rjags)
library(foreach)

## True parameter values
alpha <- 3
beta  <- 0.5
sigma <- 5.0
N     <- 100

## Simulate data
set.seed(129)
x       <- runif(N, 5, 95)
epsilon <- rnorm(N, 0, sigma)
y       <- alpha + beta*x + epsilon

# Return data in a list
dat <- list(N = N, x = x, y = y)



# ----------------------------
# Setup JAGS model and write
# to file
# ----------------------------
model.string <-
    'model {
        for (i in 1:N){
            y[i] ~ dnorm(mu.y[i], tau)
            mu.y[i] <- alpha + beta * x[i]
        }
        # Priors
        alpha ~ dnorm(0, .0001)
        beta  ~ dnorm(0, .0001)
        tau   <- pow(sigma, -2)
        sigma ~ dunif(0, 100)
    }'
writeLines(model.string, con = "example_jags.bug")


# ----------------------------
# Setup monitors and inits
# ----------------------------
## Parameters to monitor
params <- c("alpha", "beta", "sigma", "deviance")

## Setup function for initial values
inits <- function() {
    list(
        .RNG.name  = "lecuyer::RngStream",
        .RNG.seed  = runif(1, 0, 2^31),
        alpha = rnorm(1), beta = rnorm(1), sigma = runif(1))
}


# ----------------------------
# Sample all chains in serial
# ----------------------------
fit.s <- jags_sample(
    data = dat,
    inits = inits,
    file = "example_jags.bug",
    variable.names = params,
    n.chains = 2,
    n.adapt = 100,
    burnin = 100,
    n.iter = 1000,
    thin = 1,
    load.modules = c("dic", "lecuyer"),
    method = "serial",
    progress.bar = "text")

# ----------------------------
# Sample all chains in parallel
# ----------------------------
fit.p <- jags_sample(
    data = dat,
    inits = inits,
    file = "example_jags.bug",
    variable.names = params,
    n.chains = 2,
    n.adapt = 100,
    burnin = 100,
    n.iter = 1000,
    thin = 1,
    load.modules = c("dic", "lecuyer"),
    method = "parallel",
    progress.bar = "text",
    parallel = list(
        n.clusters = 2,
        RNGseed = 123,
        type = "PSOCK",
        verbose = TRUE))

fit.p <- jags_sample(
    data = dat,
    inits = inits,
    file = "example_jags.bug",
    variable.names = params,
    n.chains = 2,
    n.adapt = 100,
    burnin = 100,
    n.iter = 1000,
    thin = 1,
    load.modules = c("dic", "lecuyer"),
    method = "parallel",
    progress.bar = "text",
    parallel = list(
        n.clusters = 2,
        RNGseed = 123,
        type = "MC",
        verbose = TRUE))
}
\seealso{
\code{\link{jags.model}}
         \code{\link{coda.samples}}
         \code{\link{mcmc.list}}
         \code{\link{load.module}}
         \code{\link{unload.module}}
}
\author{
Michael Malick
}
